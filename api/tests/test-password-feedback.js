import mongoose from 'mongoose';

// URL do MongoDB Atlas
const ATLAS_URL = 'mongodb+srv://joaokusaka27:Oi2cWcwnYEzBXL7X@joaocluster.t5exvmz.mongodb.net/camarize?retryWrites=true&w=majority&appName=JoaoCluster';

// API URL
const API_URL = 'http://localhost:4000';

// Fun√ß√£o para testar valida√ß√£o de senha (simulando frontend)
function validatePassword(password) {
  if (password.length < 8) {
    return "A senha deve ter pelo menos 8 caracteres";
  }
  if (password.length > 30) {
    return "A senha deve ter no m√°ximo 30 caracteres";
  }
  
  // Regex para permitir apenas A-Z, a-z, 0-9, @, _, *, ., -
  const allowedChars = /^[A-Za-z0-9@_*.-]*$/;
  if (!allowedChars.test(password)) {
    return "A senha pode conter apenas letras (A-Z, a-z), n√∫meros (0-9) e s√≠mbolos (@, _, *, ., -)";
  }
  
  return "";
}

async function testPasswordFeedback() {
  try {
    console.log('üß™ Testando feedback visual da valida√ß√£o de senha...\n');

    const testCases = [
      {
        name: "Senha vazia",
        password: "",
        expectedError: "A senha deve ter pelo menos 8 caracteres",
        expectedValid: false
      },
      {
        name: "Senha muito curta",
        password: "123",
        expectedError: "A senha deve ter pelo menos 8 caracteres",
        expectedValid: false
      },
      {
        name: "Senha v√°lida simples",
        password: "12345678",
        expectedError: "",
        expectedValid: true
      },
      {
        name: "Senha v√°lida com s√≠mbolos",
        password: "Senha123@",
        expectedError: "",
        expectedValid: true
      },
      {
        name: "Senha v√°lida com h√≠fen",
        password: "Minha-Senha_123",
        expectedError: "",
        expectedValid: true
      },
      {
        name: "Senha com caracteres inv√°lidos",
        password: "Senha 123",
        expectedError: "A senha pode conter apenas letras (A-Z, a-z), n√∫meros (0-9) e s√≠mbolos (@, _, *, ., -)",
        expectedValid: false
      },
      {
        name: "Senha muito longa",
        password: "EstaSenhaETaoLongaQueUltrapassaOLimiteDe30Caracteres",
        expectedError: "A senha deve ter no m√°ximo 30 caracteres",
        expectedValid: false
      }
    ];

    let passedTests = 0;
    let totalTests = testCases.length;

    for (const testCase of testCases) {
      console.log(`üìã Testando: ${testCase.name}`);
      console.log(`   Senha: "${testCase.password}"`);
      
      const error = validatePassword(testCase.password);
      const isValid = testCase.password.length >= 8 && !error;
      
      // Verificar se o erro est√° correto
      const errorCorrect = error === testCase.expectedError;
      const validCorrect = isValid === testCase.expectedValid;
      
      if (errorCorrect && validCorrect) {
        console.log(`   ‚úÖ PASSOU:`);
        if (error) {
          console.log(`      ‚ùå Erro: ${error}`);
          console.log(`      üé® Campo deve ficar VERMELHO`);
        } else {
          console.log(`      ‚úÖ V√°lida: ${isValid}`);
          console.log(`      üé® Campo deve ficar VERDE`);
        }
        passedTests++;
      } else {
        console.log(`   ‚ùå FALHOU:`);
        console.log(`      Esperado erro: "${testCase.expectedError}"`);
        console.log(`      Recebido erro: "${error}"`);
        console.log(`      Esperado v√°lida: ${testCase.expectedValid}`);
        console.log(`      Recebido v√°lida: ${isValid}`);
      }
      
      console.log(''); // Linha em branco
    }

    console.log(`üìä RESULTADO DOS TESTES:`);
    console.log(`   ‚úÖ Passou: ${passedTests}/${totalTests}`);
    console.log(`   ‚ùå Falhou: ${totalTests - passedTests}/${totalTests}`);
    console.log(`   üìà Taxa de sucesso: ${((passedTests / totalTests) * 100).toFixed(1)}%`);

    if (passedTests === totalTests) {
      console.log('\nüéâ TODOS OS TESTES PASSARAM! O feedback visual est√° funcionando corretamente!');
      console.log('\nüé® RESUMO DO FEEDBACK VISUAL:');
      console.log('   üî¥ Campo VERMELHO: Quando h√° erro de valida√ß√£o');
      console.log('   üü¢ Campo VERDE: Quando a senha √© v√°lida');
      console.log('   ‚ö™ Campo NORMAL: Quando est√° vazio ou digitando');
    } else {
      console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique a implementa√ß√£o do feedback.');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar testes
testPasswordFeedback();

