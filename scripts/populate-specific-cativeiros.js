#!/usr/bin/env node

import mongoose from "../api/node_modules/mongoose/index.js";
import dotenv from "dotenv";
import readline from 'readline';
// Evitar usar Models do Mongoose aqui para n√£o conflitar inst√¢ncias.
// Vamos usar a conex√£o nativa (db.collection(...)) para buscar e inserir.

// Carrega as vari√°veis de ambiente
dotenv.config({ path: './api/.env' });

const mongoUrl = process.env.MONGO_URL || "mongodb://localhost:27017/camarize";
const inferredDbFromUri = (() => {
  try {
    const tail = mongoUrl.split('/').pop() || '';
    return (tail.split('?')[0] || '').trim() || undefined;
  } catch { return undefined; }
})();
const dbName = process.env.MONGO_DB_NAME || inferredDbFromUri || 'camarize';

// Interface de leitura do terminal
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Fun√ß√£o para fazer perguntas ao usu√°rio
function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function populateSpecificCativeiros() {
  try {
    console.log("üîç Adicionando par√¢metros manualmente...");
    
    // Configurar timeout maior para conex√£o
    mongoose.set('bufferCommands', false);
    console.log(`üåê Conectando em: ${mongoUrl} | dbName: ${dbName}`);
    mongoose.connection.on('connected', () => console.log('üîå mongoose connected'));
    mongoose.connection.on('error', (e) => console.error('üî¥ mongoose connection error:', e.message));
    mongoose.connection.on('disconnected', () => console.log('üîå mongoose disconnected'));
    await mongoose.connect(mongoUrl, {
      serverSelectionTimeoutMS: 30000, // 30 segundos
      socketTimeoutMS: 45000, // 45 segundos
      dbName
    });
    console.log("‚úÖ Conex√£o com MongoDB estabelecida!");
    try {
      const ping = await mongoose.connection.db.admin().command({ ping: 1 });
      console.log(`üîó Ping OK (${JSON.stringify(ping)}) | host: ${mongoose.connection.host} | db: ${mongoose.connection.name}`);
    } catch (e) {
      console.error('‚ùå Ping falhou (verifique MONGO_URL/IP no Atlas ou servi√ßo local):', e.message);
    }
    
    // Aguardar um pouco para garantir que a conex√£o est√° est√°vel
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Buscar cativeiros existentes (consulta leve e com timeout maior) - usando driver nativo
    const t0 = Date.now();
    const cativeiros = await mongoose.connection.db
      .collection('cativeiros')
      .find({}, { projection: { _id: 1, nome: 1, id_tipo_camarao: 1 } })
      .toArray();
    console.log(`‚è±Ô∏è cativeiros.find levou ${Date.now() - t0}ms`);
    console.log(`üìã Encontrados ${cativeiros.length} cativeiros`);
    
    if (cativeiros.length === 0) {
      console.log("‚ùå Nenhum cativeiro encontrado! Crie um cativeiro primeiro.");
      return;
    }
    
    // Buscar tipos de camar√£o para mostrar informa√ß√µes (cole√ß√£o tiposcamaroes)
    const tiposCamarao = await mongoose.connection.db
      .collection('tiposcamaroes')
      .find({})
      .toArray();
    const tiposMap = {};
    tiposCamarao.forEach(tipo => {
      tiposMap[tipo._id.toString()] = tipo.nome;
    });
    
    // Mostrar cativeiros dispon√≠veis
    console.log("\nüè† Cativeiros dispon√≠veis:");
    cativeiros.forEach((cativeiro, index) => {
      const tipoNome = tiposMap[cativeiro.id_tipo_camarao?.toString()] || 'Tipo n√£o definido';
      console.log(`   ${index + 1}. ${cativeiro.nome} (${tipoNome})`);
    });
    
    // Escolher cativeiro
    const escolhaCativeiro = await question("\nüìù Escolha o n√∫mero do cativeiro: ");
    const indiceCativeiro = parseInt(escolhaCativeiro) - 1;
    
    if (indiceCativeiro < 0 || indiceCativeiro >= cativeiros.length) {
      console.log("‚ùå Escolha inv√°lida!");
      return;
    }
    
    const cativeiroEscolhido = cativeiros[indiceCativeiro];
    console.log(`\n‚úÖ Cativeiro selecionado: ${cativeiroEscolhido.nome}`);
    
    // Coletar dados do usu√°rio
    console.log("\nüìä Insira os valores dos par√¢metros:");
    
    const temperatura = await question("üå°Ô∏è Temperatura (¬∞C): ");
    const ph = await question("üß™ pH: ");
    const amonia = await question("‚öóÔ∏è Am√¥nia (mg/L): ");
    
    // Validar dados
    const temp = parseFloat(temperatura);
    const phValue = parseFloat(ph);
    const amoniaValue = parseFloat(amonia);
    
    if (isNaN(temp) || isNaN(phValue) || isNaN(amoniaValue)) {
      console.log("‚ùå Valores inv√°lidos! Use apenas n√∫meros.");
      return;
    }
    
    // Confirmar dados
    console.log("\nüìã Dados a serem inseridos:");
    console.log(`   Cativeiro: ${cativeiroEscolhido.nome}`);
    console.log(`   Temperatura: ${temp}¬∞C`);
    console.log(`   pH: ${phValue}`);
    console.log(`   Am√¥nia: ${amoniaValue} mg/L`);
    console.log(`   Data/Hora: ${new Date().toLocaleString()}`);
    
    const confirmacao = await question("\n‚ùì Confirmar inser√ß√£o? (s/n): ");
    
    if (confirmacao.toLowerCase() !== 's' && confirmacao.toLowerCase() !== 'sim') {
      console.log("‚ùå Opera√ß√£o cancelada.");
      return;
    }
    
    // Criar registro
    const insertRes = await mongoose.connection.db
      .collection('parametros_atuais')
      .insertOne({
        datahora: new Date(),
        temp_atual: temp,
        ph_atual: phValue,
        amonia_atual: amoniaValue,
        id_cativeiro: cativeiroEscolhido._id
      });
    console.log("\n‚úÖ Par√¢metro inserido com sucesso!");
    console.log(`üìä ID do registro: ${insertRes.insertedId}`);
    
    // Mostrar estat√≠sticas
    const totalParametros = await mongoose.connection.db.collection('parametros_atuais').countDocuments();
    const parametrosCativeiro = await mongoose.connection.db.collection('parametros_atuais').countDocuments({ id_cativeiro: cativeiroEscolhido._id });
    
    console.log(`\nüìà Estat√≠sticas:`);
    console.log(`   Total de par√¢metros no banco: ${totalParametros}`);
    console.log(`   Par√¢metros deste cativeiro: ${parametrosCativeiro}`);
    
    // Perguntar se quer adicionar mais
    const adicionarMais = await question("\n‚ùì Adicionar mais um registro? (s/n): ");
    
    if (adicionarMais.toLowerCase() === 's' || adicionarMais.toLowerCase() === 'sim') {
      console.log("\n" + "=".repeat(50));
      await populateSpecificCativeiros(); // Recurs√£o para adicionar mais
    } else {
      console.log("\nüéâ Processo finalizado!");
    }
    
  } catch (error) {
    console.error("‚ùå Erro durante a inser√ß√£o:", error);
  } finally {
    rl.close();
    await mongoose.disconnect();
    console.log("üîå Conex√£o com MongoDB fechada.");
  }
}

populateSpecificCativeiros(); 